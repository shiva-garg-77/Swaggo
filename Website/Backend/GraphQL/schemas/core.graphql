# Core GraphQL schema definitions

# Scalar types
scalar Date
scalar DateTime
scalar JSON
scalar URL

# Interface for timestamped entities
interface Timestamped {
  createdAt: DateTime
  updatedAt: DateTime
}

# Interface for entities with ID
interface Node {
  id: ID!
}

# Pagination information
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

# Standard response wrapper
type Response {
  success: Boolean!
  message: String
  errors: [Error!]
}

# Standard error object
type Error {
  code: String!
  message: String!
  field: String
}

# Authentication payload
type AuthPayload {
  token: String!
  user: User!
}

# User type
"""
Represents a user in the system with authentication and profile information
"""
type User implements Node & Timestamped {
  "Unique identifier for the user"
  id: ID!
  
  "Unique username for the user"
  username: String!
  
  "User's email address"
  email: String!
  
  "URL to the user's profile picture"
  profilePicture: URL
  
  "Associated profile information"
  profile: Profile
  
  "Timestamp when the user was created"
  createdAt: DateTime
  
  "Timestamp when the user was last updated"
  updatedAt: DateTime
}

# Profile type
"""
Represents a user's profile information and social connections
"""
type Profile implements Node & Timestamped {
  "Unique identifier for the profile"
  id: ID!
  
  "Unique profile identifier"
  profileid: String!
  
  "URL to the profile picture"
  profilePic: URL
  
  "Whether the profile is private"
  isPrivate: Boolean
  
  "Whether the profile is verified"
  isVerified: Boolean
  
  "Username associated with the profile"
  username: String!
  
  "User's display name"
  name: String
  
  "User's biography"
  bio: String
  
  "List of followers"
  followers: [Profile!]
  
  "List of users being followed"
  following: [Profile!]
  
  "Number of followers"
  followersCount: Int
  
  "Number of users being followed"
  followingCount: Int
  
  "Number of posts"
  postsCount: Int
  
  "List of close friends"
  closeFriends: [CloseFriend!]
  
  "List of users for whom this profile is a close friend"
  closeFriendsOf: [CloseFriend!]
  
  "List of posts created by the user"
  posts: [Post!]
  
  "List of drafts created by the user"
  drafts: [Draft!]
  
  "List of posts liked by the user"
  likedPosts: [Post!]
  
  "List of posts saved by the user"
  savedPosts: [Post!]
  
  "List of memories associated with the user"
  memories: [Memory!]
  
  "List of blocked accounts"
  blockedAccounts: [BlockedAccount!]
  
  "List of restricted accounts"
  restrictedAccounts: [RestrictedAccount!]
  
  "List of mentions"
  mentions: [Mention!]
  
  "User settings"
  settings: UserSettings
  
  "List of stories"
  stories: [Story!]
  
  "Timestamp when the profile was created"
  createdAt: DateTime
  
  "Timestamp when the profile was last updated"
  updatedAt: DateTime
}

# User settings
type UserSettings implements Node & Timestamped {
  id: ID!
  profileid: String!
  allowMentions: Boolean!
  mentionNotifications: Boolean!
  tagNotifications: Boolean!
  showTaggedPosts: Boolean!
  isPrivate: Boolean!
  allowMessages: String!
  showActivity: Boolean!
  twoFactor: Boolean!
  notificationsEnabled: Boolean!
  darkMode: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
}

# Post type
"""
Represents a social media post with content and engagement metrics
"""
type Post implements Node & Timestamped {
  "Unique identifier for the post"
  id: ID!
  
  "Unique post identifier"
  postid: String!
  
  "Profile that created the post"
  profile: Profile!
  
  "URL to the post content"
  postUrl: URL!
  
  "List of likes on the post"
  like: [Like!]
  
  "List of comments on the post"
  comments: [Comment!]
  
  "List of mentions in the post"
  mentions: [Mention!]
  
  "Number of likes on the post"
  likeCount: Int!
  
  "Number of comments on the post"
  commentCount: Int!
  
  "Whether the current user has liked the post"
  isLikedByUser: Boolean!
  
  "Whether the current user has saved the post"
  isSavedByUser: Boolean!
  
  "Title of the post"
  title: String
  
  "Description of the post"
  description: String
  
  "Type of post content"
  postType: String!
  
  "Location associated with the post"
  location: String
  
  "List of tagged people"
  taggedPeople: [String!]
  
  "List of tags"
  tags: [String!]
  
  "Whether comments are allowed on the post"
  allowComments: Boolean
  
  "Whether to hide the like count"
  hideLikeCount: Boolean
  
  "Whether to auto-play media"
  autoPlay: Boolean
  
  "Whether the post is only visible to close friends"
  isCloseFriendOnly: Boolean
  
  "Timestamp when the post was created"
  createdAt: DateTime
  
  "Timestamp when the post was last updated"
  updatedAt: DateTime
}

# Comment type
"""
Represents a comment on a post
"""
type Comment implements Node & Timestamped {
  "Unique identifier for the comment"
  id: ID!
  
  "Unique comment identifier"
  commentid: String!
  
  "Identifier of the post the comment belongs to"
  postid: String!
  
  "Profile that created the comment"
  profile: Profile!
  
  "Profile being replied to (if applicable)"
  userto: Profile
  
  "Identifier of the comment being replied to (if applicable)"
  commenttoid: String
  
  "Comment content"
  comment: String!
  
  "List of replies to this comment"
  replies: [Comment!]
  
  "List of likes on the comment"
  like: [Like!]
  
  "Number of likes on the comment"
  likeCount: Int!
  
  "Whether the current user has liked the comment"
  isLikedByUser: Boolean!
  
  "Timestamp when the comment was created"
  createdAt: DateTime
  
  "Timestamp when the comment was last updated"
  updatedAt: DateTime
}

# Like type
type Like implements Node & Timestamped {
  id: ID!
  profileid: String!
  profile: Profile!
  postid: String!
  commentid: String
  createdAt: DateTime
  updatedAt: DateTime
}

# Draft type
type Draft implements Node & Timestamped {
  id: ID!
  draftid: String!
  profileid: String!
  profile: Profile!
  postUrl: URL
  postType: String
  title: String
  caption: String
  location: String
  taggedPeople: [String!]
  tags: [String!]
  allowComments: Boolean
  hideLikeCount: Boolean
  autoPlay: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

# Memory type
type Memory implements Node & Timestamped {
  id: ID!
  memoryid: String!
  profileid: String!
  profile: Profile!
  title: String!
  coverImage: URL
  postUrl: URL
  stories: [Story!]
  createdAt: DateTime
  updatedAt: DateTime
}

# Blocked account type
type BlockedAccount implements Node & Timestamped {
  id: ID!
  blockid: String!
  profileid: String!
  blockedprofileid: String!
  profile: Profile!
  blockedProfile: Profile!
  reason: String
  createdAt: DateTime
  updatedAt: DateTime
}

# Restricted account type
type RestrictedAccount implements Node & Timestamped {
  id: ID!
  restrictid: String!
  profileid: String!
  restrictedprofileid: String!
  profile: Profile!
  restrictedProfile: Profile!
  createdAt: DateTime
  updatedAt: DateTime
}

# Close friend type
type CloseFriend implements Node & Timestamped {
  id: ID!
  closefriendid: String!
  profileid: String!
  closeFriend: Profile!
  profile: Profile!
  status: String!
  createdAt: DateTime
  updatedAt: DateTime
}

# Mention type
type Mention implements Node & Timestamped {
  id: ID!
  mentionid: String!
  mentionedprofileid: String!
  mentionerprofileid: String!
  mentionedProfile: Profile!
  mentionerProfile: Profile!
  contexttype: String!
  contextid: String!
  isnotified: Boolean!
  isread: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
}

# Story type
type Story implements Node & Timestamped {
  id: ID!
  storyid: String!
  profileid: String!
  profile: Profile!
  mediaUrl: URL!
  mediaType: String!
  caption: String
  viewers: [StoryViewer!]
  viewersCount: Int!
  isViewedByUser: Boolean!
  isActive: Boolean!
  savedToHighlights: Boolean!
  expiresAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

# Story viewer type
type StoryViewer implements Node & Timestamped {
  id: ID!
  profileid: String!
  profile: Profile!
  viewedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

# Highlight story type
type HighlightStory implements Node & Timestamped {
  id: ID!
  storyid: String!
  mediaUrl: URL!
  mediaType: String!
  caption: String
  originalStoryDate: DateTime!
  addedToHighlightAt: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
}

# Highlight type
type Highlight implements Node & Timestamped {
  id: ID!
  highlightid: String!
  profileid: String!
  profile: Profile!
  title: String!
  coverImage: URL
  stories: [HighlightStory!]!
  isActive: Boolean!
  viewCount: Int!
  category: String
  storyCount: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

# Chat type
"""
Represents a chat conversation between users
"""
type Chat implements Node & Timestamped {
  "Unique identifier for the chat"
  id: ID!
  
  "Unique chat identifier"
  chatid: String!
  
  "List of participants in the chat"
  participants: [Profile!]!
  
  "Type of chat (e.g., 'private', 'group')"
  chatType: String!
  
  "Name of the chat (for group chats)"
  chatName: String
  
  "URL to the chat avatar"
  chatAvatar: URL
  
  "Last message in the chat"
  lastMessage: Message
  
  "Timestamp of the last message"
  lastMessageAt: DateTime
  
  "Whether the chat is active"
  isActive: Boolean!
  
  "List of profiles that have muted the chat"
  mutedBy: [Profile!]
  
  "List of chat administrators"
  adminIds: [Profile!]
  
  "Profile that created the chat"
  createdBy: Profile!
  
  "List of messages in the chat"
  messages: [Message!]
  
  "Timestamp when the chat was created"
  createdAt: DateTime
  
  "Timestamp when the chat was last updated"
  updatedAt: DateTime
}

# Message type
"""
Represents a message in a chat
"""
type Message implements Node & Timestamped {
  "Unique identifier for the message"
  id: ID!
  
  "Unique message identifier"
  messageid: String!
  
  "Identifier of the chat the message belongs to"
  chatid: String!
  
  "Chat the message belongs to"
  chat: Chat!
  
  "Identifier of the sender"
  senderid: String!
  
  "Profile of the sender"
  sender: Profile!
  
  "Type of message (e.g., 'text', 'image', 'video')"
  messageType: String!
  
  "Message content"
  content: String
  
  "List of attachments"
  attachments: [MessageAttachment!]
  
  "Message being replied to (if applicable)"
  replyTo: Message
  
  "List of mentioned profiles"
  mentions: [Profile!]
  
  "List of reactions to the message"
  reactions: [MessageReaction!]
  
  "List of profiles that have read the message"
  readBy: [MessageReadStatus!]
  
  "Whether the message has been edited"
  isEdited: Boolean
  
  "Edit history of the message"
  editHistory: [MessageEditHistory!]
  
  "Whether the message has been deleted"
  isDeleted: Boolean
  
  "Profile that deleted the message (if applicable)"
  deletedBy: Profile
  
  "Timestamp when the message was deleted (if applicable)"
  deletedAt: DateTime
  
  "Status of the message (e.g., 'sent', 'delivered', 'read')"
  messageStatus: String
  
  "Timestamp when the message was created"
  createdAt: DateTime
  
  "Timestamp when the message was last updated"
  updatedAt: DateTime
  
  "List of link previews in the message"
  linkPreviews: [LinkPreview!]
}

# Message attachment type
type MessageAttachment {
  type: String!
  url: URL!
  filename: String
  size: Int
  mimetype: String
}

# Message reaction type
type MessageReaction {
  profileid: String!
  profile: Profile!
  emoji: String!
  createdAt: DateTime
}

# Message read status type
type MessageReadStatus {
  profileid: String!
  profile: Profile!
  readAt: DateTime
}

# Message edit history type
type MessageEditHistory {
  content: String!
  editedAt: DateTime
}

# Link preview type
type LinkPreview {
  url: URL!
  title: String
  description: String
  image: URL
  siteName: String
}

# Call log type
type CallLog implements Node & Timestamped {
  id: ID!
  callId: String!
  chatid: String!
  callerId: String!
  caller: Profile!
  receiverId: String
  receiver: Profile
  participants: [Profile!]!
  callType: String!
  status: String!
  duration: Int!
  startedAt: DateTime
  answeredAt: DateTime
  endedAt: DateTime
  endedBy: String
  endReason: String
  quality: CallQuality
  techDetails: CallTechDetails
  isRecorded: Boolean!
  recordingUrl: URL
  hadScreenShare: Boolean!
  notificationStatus: CallNotificationStatus
  createdAt: DateTime
  updatedAt: DateTime
}

# Call quality type
type CallQuality {
  overall: String
  audio: String
  video: String
  connection: String
}

# Call tech details type
type CallTechDetails {
  iceConnectionState: String
  connectionState: String
  signalingState: String
  bandwidth: Bandwidth
  codec: Codec
  resolution: Resolution
  frameRate: Int
  jitter: Int
  packetLoss: Int
  latency: Int
}

# Bandwidth type
type Bandwidth {
  upload: Int
  download: Int
}

# Codec type
type Codec {
  audio: String
  video: String
}

# Resolution type
type Resolution {
  width: Int
  height: Int
}

# Call notification status type
type CallNotificationStatus {
  sent: Boolean!
  delivered: Boolean!
  read: Boolean!
  sentAt: DateTime
  deliveredAt: DateTime
  readAt: DateTime
}

# Scheduled message type
type ScheduledMessage implements Node & Timestamped {
  id: ID!
  scheduledMessageId: String!
  chatid: String!
  chat: Chat!
  senderid: String!
  sender: Profile!
  messageType: String!
  content: String
  attachments: [MessageAttachment!]
  scheduledFor: DateTime!
  status: String!
  retryCount: Int!
  maxRetries: Int!
  failureReason: String
  stickerData: StickerData
  gifData: GifData
  voiceData: VoiceData
  fileData: FileData
  linkPreviews: [LinkPreview!]
  createdAt: DateTime
  updatedAt: DateTime
}

# Sticker data type
type StickerData {
  id: String
  name: String
  preview: URL
  url: URL
  category: String
}

# GIF data type
type GifData {
  id: String
  title: String
  url: URL
  thumbnail: URL
  category: String
  dimensions: GifDimensions
}

# GIF dimensions type
type GifDimensions {
  width: Int
  height: Int
}

# Voice data type
type VoiceData {
  duration: Int
  size: Int
  mimeType: String
  fileId: String
  url: URL
}

# File data type
type FileData {
  fileId: String
  name: String
  size: Int
  mimeType: String
  url: URL
}

# Query type
type Query {
  # Health check
  health: Response
  
  # User queries
  users: [User!]
  user(id: ID!): User
  userByUsername(username: String!): User
  
  # Profile queries
  profiles: [Profile!]
  profile(id: ID!): Profile
  profileByUsername(username: String!): Profile
  
  # Post queries
  posts: [Post!]
  post(id: ID!): Post
  
  # Draft queries
  drafts(profileid: String!): [Draft!]
  draft(id: ID!): Draft
  
  # Memory queries
  memories(profileid: String!): [Memory!]
  memory(id: ID!): Memory
  
  # Comment queries
  comments(postid: String!): [Comment!]
  comment(id: ID!): Comment
  
  # Like queries
  likes(postid: String!): [Like!]
  like(id: ID!): Like
  
  # Chat queries
  chats(profileid: String!): [Chat!]
  chat(id: ID!): Chat
  chatByParticipants(participants: [String!]!): Chat
  
  # Message queries
  messages(chatid: String!, limit: Int, cursor: String): MessageConnection
  message(id: ID!): Message
  
  # Story queries
  stories(profileid: String): [Story!]
  story(id: ID!): Story
  
  # Highlight queries
  highlights(profileid: String!): [Highlight!]
  highlight(id: ID!): Highlight
  
  # Call log queries
  callHistory(profileid: String!): [CallLog!]
  callLog(id: ID!): CallLog
  
  # Scheduled message queries
  scheduledMessages(chatId: String): [ScheduledMessage!]
  scheduledMessage(scheduledMessageId: String!): ScheduledMessage
}

# Mutation type
type Mutation {
  # Authentication mutations
  login(email: String!, password: String!): AuthPayload
  signup(username: String!, email: String!, password: String!): AuthPayload
  logout: Response
  
  # User mutations
  createUser(input: UserInput!): User
  updateUser(id: ID!, input: UserInput!): User
  deleteUser(id: ID!): Response
  
  # Profile mutations
  createProfile(input: ProfileInput!): Profile
  updateProfile(id: ID!, input: ProfileInput!): Profile
  deleteProfile(id: ID!): Response
  
  # Post mutations
  createPost(input: PostInput!): Post
  updatePost(id: ID!, input: PostInput!): Post
  deletePost(id: ID!): Response
  
  # Comment mutations
  createComment(input: CommentInput!): Comment
  updateComment(id: ID!, input: CommentInput!): Comment
  deleteComment(id: ID!): Response
  
  # Like mutations
  toggleLike(input: LikeInput!): Like
  
  # Draft mutations
  createDraft(input: DraftInput!): Draft
  updateDraft(id: ID!, input: DraftInput!): Draft
  deleteDraft(id: ID!): Response
  publishDraft(id: ID!): Post
  
  # Memory mutations
  createMemory(input: MemoryInput!): Memory
  updateMemory(id: ID!, input: MemoryInput!): Memory
  deleteMemory(id: ID!): Response
  
  # Chat mutations
  createChat(input: ChatInput!): Chat
  updateChat(id: ID!, input: ChatInput!): Chat
  deleteChat(id: ID!): Response
  
  # Message mutations
  sendMessage(input: MessageInput!): Message
  editMessage(id: ID!, content: String!): Message
  deleteMessage(id: ID!): Response
  
  # Story mutations
  createStory(input: StoryInput!): Story
  deleteStory(id: ID!): Response
  
  # Highlight mutations
  createHighlight(input: HighlightInput!): Highlight
  updateHighlight(id: ID!, input: HighlightInput!): Highlight
  deleteHighlight(id: ID!): Response
  
  # Scheduled message mutations
  createScheduledMessage(input: ScheduledMessageInput!): ScheduledMessage
  cancelScheduledMessage(scheduledMessageId: String!): ScheduledMessage
}

# Subscription type
type Subscription {
  # Message subscriptions
  messageAdded(chatid: String!): Message
  messageUpdated(chatid: String!): Message
  messageDeleted(chatid: String!): Message
  
  # Chat subscriptions
  chatUpdated(chatid: String!): Chat
  chatDeleted(chatid: String!): Chat
  
  # User subscriptions
  userUpdated(id: ID!): User
  
  # Post subscriptions
  postAdded: Post
  postUpdated(id: ID!): Post
  postDeleted(id: ID!): Post
}

# Input types for mutations

input UserInput {
  username: String!
  email: String!
  password: String!
  profilePicture: URL
}

input ProfileInput {
  profileid: String!
  profilePic: URL
  isPrivate: Boolean
  isVerified: Boolean
  username: String!
  name: String
  bio: String
}

input PostInput {
  profileid: String!
  postUrl: URL!
  title: String
  description: String
  postType: String!
  location: String
  taggedPeople: [String!]
  tags: [String!]
  allowComments: Boolean
  hideLikeCount: Boolean
  autoPlay: Boolean
  isCloseFriendOnly: Boolean
}

input CommentInput {
  postid: String!
  profileid: String!
  usertoid: String
  commenttoid: String
  comment: String!
}

input LikeInput {
  profileid: String!
  postid: String!
  commentid: String
}

input DraftInput {
  profileid: String!
  postUrl: URL
  postType: String
  title: String
  caption: String
  location: String
  taggedPeople: [String!]
  tags: [String!]
  allowComments: Boolean
  hideLikeCount: Boolean
  autoPlay: Boolean
}

input MemoryInput {
  profileid: String!
  title: String!
  coverImage: URL
  postUrl: URL
}

input ChatInput {
  participants: [String!]!
  chatType: String!
  chatName: String
  chatAvatar: URL
}

input MessageInput {
  chatid: String!
  messageType: String!
  content: String
  attachments: [MessageAttachmentInput!]
  replyTo: String
  mentions: [String!]
}

input MessageAttachmentInput {
  type: String!
  url: URL!
  filename: String
  size: Int
  mimetype: String
}

input StoryInput {
  profileid: String!
  mediaUrl: URL!
  mediaType: String!
  caption: String
}

input HighlightInput {
  profileid: String!
  title: String!
  coverImage: URL
  category: String
}

input ScheduledMessageInput {
  chatid: String!
  messageType: String
  content: String
  attachments: [MessageAttachmentInput!]
  scheduledFor: DateTime!
  stickerData: StickerDataInput
  gifData: GifDataInput
  voiceData: VoiceDataInput
  fileData: FileDataInput
  linkPreviews: [LinkPreviewInput!]
}

input StickerDataInput {
  id: String
  name: String
  preview: URL
  url: URL
  category: String
}

input GifDataInput {
  id: String
  title: String
  url: URL
  thumbnail: URL
  category: String
  dimensions: GifDimensionsInput
}

input GifDimensionsInput {
  width: Int
  height: Int
}

input VoiceDataInput {
  duration: Int
  size: Int
  mimeType: String
  fileId: String
  url: URL
}

input FileDataInput {
  fileId: String
  name: String
  size: Int
  mimeType: String
  url: URL
}

input LinkPreviewInput {
  url: URL!
  title: String
  description: String
  image: URL
  siteName: String
}

# Connection types for pagination

type MessageConnection {
  messages: [Message!]!
  pageInfo: PageInfo!
  totalCount: Int!
}






