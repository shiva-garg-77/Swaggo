import connectdb from './db/Connectdb.js';
import Profile from './Models/FeedModels/Profile.js';
import Post from './Models/FeedModels/Post.js';
import Comment from './Models/FeedModels/Comments.js';
import Likes from './Models/FeedModels/Likes.js';
import LikedPost from './Models/FeedModels/LikedPost.js';
import { v4 as uuidv4 } from 'uuid';
import {
    getPostLikeCount,
    getCommentLikeCount,
    getPostCommentCount,
    hasUserLikedPost,
    hasUserLikedComment,
    getCommentReplies,
    getTopLevelComments,
    getPostStats
} from './Helper/LikeCommentHelpers.js';

async function testLikeCommentSystem() {
    console.log('🚀 Testing Enhanced Like/Comment System...\n');
    
    try {
        // Connect to database
        await connectdb();
        console.log('✅ Connected to database');
        
        // Clean up any existing test data
        await Profile.deleteMany({ username: /^test_/ });
        console.log('✅ Cleaned up existing test data');
        
        // Create test profiles
        console.log('\n📝 Creating test profiles...');
        const testProfiles = [];
        for (let i = 1; i <= 3; i++) {
            const profile = new Profile({
                profileid: uuidv4(),
                username: `test_user_${i}`,
                name: `Test User ${i}`,
                bio: `Bio for test user ${i}`,
                profilePic: null,
                isPrivate: false,
                isVerified: false
            });
            await profile.save();
            testProfiles.push(profile);
            console.log(`✅ Created profile: ${profile.username} (${profile.profileid})`);\n        }\n        \n        // Create test post\n        console.log('\\n📝 Creating test post...');\n        const testPost = new Post({\n            postid: uuidv4(),\n            profileid: testProfiles[0].profileid,\n            postUrl: 'https://example.com/test-image.jpg',\n            title: 'Test Post for Like/Comment System',\n            Description: 'This is a comprehensive test post to verify our enhanced like and comment functionality.',\n            postType: 'IMAGE',\n            location: 'Test Location',\n            taggedPeople: [],\n            tags: ['test', 'demo'],\n            allowComments: true,\n            hideLikeCount: false,\n            autoPlay: false\n        });\n        await testPost.save();\n        console.log(`✅ Created post: \"${testPost.title}\" (${testPost.postid})`);\n        \n        // Test initial post stats\n        console.log('\\n📊 Testing initial post stats...');\n        const initialStats = await getPostStats(testPost.postid, testProfiles[0].profileid);\n        console.log(`✅ Initial stats: ${initialStats.likeCount} likes, ${initialStats.commentCount} comments`);\n        console.log(`   User interactions: Liked=${initialStats.isLikedByCurrentUser}, Saved=${initialStats.isSavedByCurrentUser}`);\n        \n        // Create test comments\n        console.log('\\n💬 Creating test comments...');\n        const testComments = [];\n        const commentTexts = [\n            'Great post! Really love the content!',\n            'Amazing work, keep it up!',\n            'This is so inspiring, thanks for sharing!'\n        ];\n        \n        for (let i = 0; i < commentTexts.length; i++) {\n            const comment = new Comment({\n                commentid: uuidv4(),\n                postid: testPost.postid,\n                profileid: testProfiles[i % testProfiles.length].profileid,\n                comment: commentTexts[i]\n            });\n            await comment.save();\n            testComments.push(comment);\n            console.log(`✅ Created comment: \"${comment.comment}\" (${comment.commentid})`);\n        }\n        \n        // Create test replies\n        console.log('\\n💬 Creating comment replies...');\n        const testReplies = [];\n        const replyTexts = [\n            'I totally agree with you!',\n            'Thanks for your kind words!'\n        ];\n        \n        for (let i = 0; i < replyTexts.length; i++) {\n            const reply = new Comment({\n                commentid: uuidv4(),\n                postid: testPost.postid,\n                profileid: testProfiles[(i + 1) % testProfiles.length].profileid,\n                commenttoid: testComments[0].commentid, // Reply to first comment\n                comment: replyTexts[i]\n            });\n            await reply.save();\n            testReplies.push(reply);\n            console.log(`✅ Created reply: \"${reply.comment}\" (${reply.commentid})`);\n        }\n        \n        // Test comment retrieval\n        console.log('\\n🔍 Testing comment retrieval...');\n        const topLevelComments = await getTopLevelComments(testPost.postid);\n        console.log(`✅ Retrieved ${topLevelComments.length} top-level comments`);\n        \n        const replies = await getCommentReplies(testComments[0].commentid);\n        console.log(`✅ Retrieved ${replies.length} replies to first comment`);\n        \n        // Test post likes\n        console.log('\\n👍 Testing post likes...');\n        for (let i = 0; i < testProfiles.length; i++) {\n            const like = new Likes({\n                postid: testPost.postid,\n                profileid: testProfiles[i].profileid\n            });\n            await like.save();\n            \n            const likedPost = new LikedPost({\n                postid: testPost.postid,\n                profileid: testProfiles[i].profileid\n            });\n            await likedPost.save();\n            \n            console.log(`✅ User ${testProfiles[i].username} liked the post`);\n        }\n        \n        // Test comment likes\n        console.log('\\n👍 Testing comment likes...');\n        for (let i = 0; i < testComments.length; i++) {\n            const like = new Likes({\n                postid: testPost.postid,\n                commentid: testComments[i].commentid,\n                profileid: testProfiles[(i + 1) % testProfiles.length].profileid\n            });\n            await like.save();\n            console.log(`✅ User ${testProfiles[(i + 1) % testProfiles.length].username} liked comment: \"${testComments[i].comment.substring(0, 30)}...\"`);\n        }\n        \n        // Test helper functions\n        console.log('\\n🧪 Testing helper functions...');\n        \n        const postLikeCount = await getPostLikeCount(testPost.postid);\n        console.log(`✅ Post like count: ${postLikeCount}`);\n        \n        const postCommentCount = await getPostCommentCount(testPost.postid);\n        console.log(`✅ Post comment count: ${postCommentCount}`);\n        \n        const commentLikeCount = await getCommentLikeCount(testComments[0].commentid);\n        console.log(`✅ First comment like count: ${commentLikeCount}`);\n        \n        const userLikedPost = await hasUserLikedPost(testPost.postid, testProfiles[0].profileid);\n        console.log(`✅ User ${testProfiles[0].username} liked post: ${userLikedPost}`);\n        \n        const userLikedComment = await hasUserLikedComment(testComments[0].commentid, testProfiles[1].profileid);\n        console.log(`✅ User ${testProfiles[1].username} liked first comment: ${userLikedComment}`);\n        \n        // Test final post stats\n        console.log('\\n📊 Testing final post stats...');\n        const finalStats = await getPostStats(testPost.postid, testProfiles[0].profileid);\n        console.log(`✅ Final stats: ${finalStats.likeCount} likes, ${finalStats.commentCount} comments`);\n        console.log(`   User interactions: Liked=${finalStats.isLikedByCurrentUser}, Saved=${finalStats.isSavedByCurrentUser}`);\n        \n        // Test data structure verification\n        console.log('\\n🔍 Verifying data structures...');\n        \n        // Check if likes are properly separated between posts and comments\n        const allLikes = await Likes.find();\n        const postLikes = allLikes.filter(like => !like.commentid);\n        const commentLikes = allLikes.filter(like => like.commentid);\n        console.log(`✅ Total likes: ${allLikes.length} (${postLikes.length} post likes, ${commentLikes.length} comment likes)`);\n        \n        // Check comment hierarchy\n        const allComments = await Comment.find({ postid: testPost.postid });\n        const topLevel = allComments.filter(comment => !comment.commenttoid);\n        const replyLevel = allComments.filter(comment => comment.commenttoid);\n        console.log(`✅ Total comments: ${allComments.length} (${topLevel.length} top-level, ${replyLevel.length} replies)`);\n        \n        console.log('\\n🎉 All tests completed successfully!');\n        console.log('\\n📋 Test Summary:');\n        console.log(`   ✅ Created ${testProfiles.length} test profiles`);\n        console.log(`   ✅ Created 1 test post with comprehensive data`);\n        console.log(`   ✅ Created ${testComments.length} top-level comments`);\n        console.log(`   ✅ Created ${testReplies.length} comment replies`);\n        console.log(`   ✅ Added ${postLikes.length} post likes`);\n        console.log(`   ✅ Added ${commentLikes.length} comment likes`);\n        console.log(`   ✅ Verified helper functions work correctly`);\n        console.log(`   ✅ Verified data integrity and relationships`);\n        \n        console.log('\\n✨ The enhanced like/comment system is fully functional!');\n        console.log('\\n🚀 You can now use the following features:');\n        console.log('   • Like/unlike posts and comments separately');\n        console.log('   • Create nested comment replies');\n        console.log('   • Get accurate like and comment counts');\n        console.log('   • Check user interaction states (liked/saved)');\n        console.log('   • Query comments with proper hierarchy');\n        console.log('   • Get comprehensive post statistics');\n        \n    } catch (error) {\n        console.error('\\n❌ Test failed:', error);\n        throw error;\n    } finally {\n        // Clean up test data\n        console.log('\\n🧹 Cleaning up test data...');\n        try {\n            await Profile.deleteMany({ username: /^test_/ });\n            console.log('✅ Cleaned up test data');\n        } catch (cleanupError) {\n            console.error('⚠️ Cleanup warning:', cleanupError.message);\n        }\n        \n        process.exit(0);\n    }\n}\n\n// Run the test\ntestLikeCommentSystem().catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n});
