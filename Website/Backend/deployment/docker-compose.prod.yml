# 🚀 PRODUCTION DOCKER COMPOSE CONFIGURATION
# Optimized for performance, security, and scalability

version: '3.8'

# Global configuration for production
x-restart-policy: &restart-policy
  restart: unless-stopped

x-security-opts: &security-opts
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp:size=100M,mode=1777
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - DAC_OVERRIDE
    - SETGID
    - SETUID

services:
  # 📊 MongoDB Database - Production Optimized
  mongodb:
    image: mongo:7.0.6-jammy
    container_name: swaggo-mongodb-prod
    <<: *restart-policy
    user: "999:999"
    ports:
      - "127.0.0.1:27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_username
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_password
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-swaggo}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./security/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./security/mongodb.conf:/etc/mongo/mongod.conf:ro
      - /tmp/mongodb_tmp:/tmp:rw
    networks:
      - database-tier
    command: >
      mongod --auth
             --config /etc/mongo/mongod.conf
             --logpath /data/db/mongodb.log
             --logappend
             --bind_ip_all
             --slowOpThresholdMs 100
             --profile 2
             --sslMode requireSSL
             --sslPEMKeyFile /etc/ssl/mongodb.pem
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    <<: *security-opts
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
    labels:
      - "swaggo.service=database"
      - "swaggo.environment=production"

  # 📊 Redis Cache - Production Optimized
  redis:
    image: redis:7.2.4-alpine
    container_name: swaggo-redis-prod
    <<: *restart-policy
    user: "999:999"
    ports:
      - "127.0.0.1:6379:6379"
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    volumes:
      - redis_data:/data
      - ./security/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - cache-tier
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass $$(cat /run/secrets/redis_password)
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    <<: *security-opts
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
    labels:
      - "swaggo.service=cache"
      - "swaggo.environment=production"

  # 🚀 SwagGo Backend API - Production Optimized
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
        - BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        - VCS_REF=$(git rev-parse --short HEAD)
    image: swaggo/api:${API_VERSION:-latest}
    container_name: swaggo-api-prod
    <<: *restart-policy
    ports:
      - "127.0.0.1:${PORT:-45799}:45799"
    environment:
      # Application Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 45799
      
      # Database Configuration
      MONGOURI: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DATABASE:-swaggo}?authSource=admin&ssl=true
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      
      # Security Configuration
      ACCESS_TOKEN_SECRET_FILE: /run/secrets/access_token_secret
      REFRESH_TOKEN_SECRET_FILE: /run/secrets/refresh_token_secret
      CSRF_SECRET_FILE: /run/secrets/csrf_secret
      ENCRYPTION_KEY_FILE: /run/secrets/encryption_key
      
      # Application URLs
      FRONTEND_URLS: ${FRONTEND_URLS:-https://swaggo.com,https://www.swaggo.com}
      API_BASE_URL: ${API_BASE_URL:-https://api.swaggo.com}
      
      # Security Settings
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      SESSION_TIMEOUT: ${SESSION_TIMEOUT:-1800000}
      ADMIN_IP_WHITELIST: ${ADMIN_IP_WHITELIST:-127.0.0.1,::1}
      
      # Monitoring
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      
      # Performance
      UV_THREADPOOL_SIZE: 8
      NODE_OPTIONS: "--max-old-space-size=1024 --no-deprecation"
    volumes:
      - uploads_data:/app/uploads:rw
      - logs_data:/app/logs:rw
      - temp_data:/app/temp:rw
      - /tmp:/tmp:rw
    tmpfs:
      - /tmp:size=200M,mode=1777
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-tier
      - database-tier
      - cache-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:45799/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    <<: *security-opts
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
        labels: "service,environment,version"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.swaggo.com`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.services.api.loadbalancer.server.port=45799"
      - "swaggo.service=api"
      - "swaggo.environment=production"

  # 🔬 Data Science Server - Production Optimized
  data-science:
    image: python:3.11-alpine
    container_name: swaggo-data-science-prod
    <<: *restart-policy
    ports:
      - "127.0.0.1:5000:5000"
    environment:
      DS_PORT: 5000
      DS_ENV: ${NODE_ENV:-production}
      API_BASE_URL: http://api:45799
    volumes:
      - ./data-science:/app:ro
      - ds_cache:/app/cache:rw
      - ds_models:/app/models:rw
    working_dir: /app
    command: >
      sh -c "
        pip install --no-cache-dir flask pandas numpy scikit-learn &&
        python app.py
      "
    networks:
      - app-tier
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    <<: *security-opts
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
    labels:
      - "swaggo.service=data-science"
      - "swaggo.environment=production"

  # 🔒 Security-Hardened Nginx Reverse Proxy - Production
  nginx:
    image: nginx:1.25.4-alpine
    container_name: swaggo-nginx-prod
    <<: *restart-policy
    user: "101:101"
    ports:
      - "80:8080"
      - "443:8443"
    volumes:
      - ./security/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./security/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./security/ssl:/etc/nginx/ssl:ro
      - uploads_data:/var/www/uploads:ro
      - nginx_cache:/var/cache/nginx:rw
      - nginx_logs:/var/log/nginx:rw
    environment:
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/conf.d
      NGINX_ENVSUBST_TEMPLATE_DIR: /etc/nginx/templates
      API_HOST: api
      API_PORT: 45799
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app-tier
      - proxy-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    <<: *security-opts
    cap_add:
      - NET_BIND_SERVICE
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
    labels:
      - "swaggo.service=nginx"
      - "swaggo.environment=production"

  # 📈 Security Monitoring & Logging - Production
  security-monitor:
    image: swaggo/security-monitor:${MONITOR_VERSION:-latest}
    container_name: swaggo-security-monitor-prod
    <<: *restart-policy
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ALERT_WEBHOOK: ${SECURITY_ALERT_WEBHOOK}
      MONITORED_SERVICES: "api,nginx,mongodb,redis"
    volumes:
      - logs_data:/logs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring-tier
    <<: *security-opts
    depends_on:
      - api
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    labels:
      - "swaggo.service=monitoring"
      - "swaggo.environment=production"

# 💾 Secure Volume Configuration - Production
volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/swaggo}/mongodb
  mongodb_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/swaggo}/mongodb_config
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/swaggo}/redis
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/swaggo}/uploads
  logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/swaggo}/logs
  temp_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/swaggo}/temp
  nginx_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/swaggo}/nginx_cache
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/swaggo}/nginx_logs
  ds_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/swaggo}/ds_cache
  ds_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-/var/lib/swaggo}/ds_models

# 🌐 Secure Network Configuration - Production
networks:
  # Frontend tier - public facing
  proxy-tier:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: "swaggo-proxy-prod"
    ipam:
      config:
        - subnet: 172.20.0.0/24
  
  # Application tier - internal services
  app-tier:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: "swaggo-app-prod"
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24
  
  # Database tier - most restricted
  database-tier:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: "swaggo-db-prod"
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24
  
  # Cache tier
  cache-tier:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: "swaggo-cache-prod"
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/24
  
  # Monitoring tier
  monitoring-tier:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: "swaggo-monitor-prod"
    internal: true
    ipam:
      config:
        - subnet: 172.24.0.0/24

# 🔐 SECURE SECRETS MANAGEMENT - Production
secrets:
  mongo_username:
    file: ./security/.secrets/mongo_username.txt
  mongo_password:
    file: ./security/.secrets/mongo_password.txt
  redis_password:
    file: ./security/.secrets/redis_password.txt
  access_token_secret:
    file: ./security/.secrets/access_token_secret.txt
  refresh_token_secret:
    file: ./security/.secrets/refresh_token_secret.txt
  csrf_secret:
    file: ./security/.secrets/csrf_secret.txt
  encryption_key:
    file: ./security/.secrets/encryption_key.txt